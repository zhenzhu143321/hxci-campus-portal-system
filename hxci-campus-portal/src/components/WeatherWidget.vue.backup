<template>
  <div class="weather-info">
    <div class="weather-content">
      <!-- Ê≠£Â∏∏Â§©Ê∞îÊòæÁ§∫ -->
      <div class="weather-main" v-if="!weatherLoading && weatherData">
        <div class="weather-icon">
          <el-icon :size="24" :style="{ color: getWeatherIconColor(weatherData.weatherText) }">
            <component :is="getWeatherIcon(weatherData.weatherText)" />
          </el-icon>
        </div>
        <div class="weather-details">
          <div class="weather-primary">
            <span class="location">{{ weatherData.cityName }}</span>
            <span class="temperature">{{ weatherData.temperature }}¬∞C</span>
            <span class="weather-text">{{ weatherData.weatherText }}</span>
          </div>
          <div class="weather-secondary" v-if="hasSecondaryWeatherInfo(weatherData)">
            <span v-if="weatherData.feelsLike && weatherData.feelsLike !== weatherData.temperature" class="feels-like">
              ‰ΩìÊÑü{{ weatherData.feelsLike }}¬∞C
            </span>
            <span v-if="weatherData.humidity" class="humidity">ÊπøÂ∫¶{{ weatherData.humidity }}%</span>
            <span v-if="weatherData.windDir && weatherData.windScale" class="wind">
              {{ weatherData.windDir }}{{ weatherData.windScale.includes('Á∫ß') ? weatherData.windScale : weatherData.windScale + 'Á∫ß' }}
            </span>
            <span v-if="weatherData.precipitation && weatherData.precipitation > 0" class="precipitation">
              ÈôçÊ∞¥{{ weatherData.precipitation }}mm
            </span>
          </div>
        </div>
      </div>
      
      <!-- Âä†ËΩΩÁä∂ÊÄÅ -->
      <div class="weather-loading" v-else-if="weatherLoading">
        <el-icon class="loading-icon"><Loading /></el-icon>
        <span>Âä†ËΩΩÂ§©Ê∞î‰∏≠...</span>
      </div>
      
      <!-- ÈªòËÆ§Áä∂ÊÄÅ -->
      <div class="weather-default" v-else>
        <el-icon :size="20"><Sunny /></el-icon>
        <span>{{ weatherDisplay }}</span>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { 
  Sunny, 
  Cloudy, 
  Bell, 
  Loading 
} from '@element-plus/icons-vue'
import { useWeatherData } from '@/composables/useWeatherData'
import type { WeatherData } from '@/api/weather'

/**
 * üå§Ô∏è Â§©Ê∞îÁªÑ‰ª∂ - ‰∏ìÊ≥®‰∫éÂ§©Ê∞î‰ø°ÊÅØÊòæÁ§∫
 * ÂäüËÉΩÔºöÊô∫ËÉΩÂõæÊ†áÊòæÁ§∫ + ÂÆåÊï¥Ê∞îË±°‰ø°ÊÅØ + ‰ºÅ‰∏öÁ∫ßUIÊïàÊûú
 */

// ‰ΩøÁî®ÁªÑÂêàÂºèÂáΩÊï∞ÁÆ°ÁêÜÂ§©Ê∞îÊï∞ÊçÆ
const {
  weatherLoading,
  weatherData,
  weatherDisplay
} = useWeatherData()

/**
 * üåà Â§©Ê∞îÂõæÊ†áÊò†Â∞ÑÂáΩÊï∞
 * Ê†πÊçÆÂ§©Ê∞îÊñáÊú¨ËøîÂõûÂØπÂ∫îÁöÑElement PlusÂõæÊ†á
 */
const getWeatherIcon = (weatherText: string) => {
  if (weatherText.includes('Êô¥')) return Sunny
  if (weatherText.includes('Èõ®') || weatherText.includes('ÈòµÈõ®') || weatherText.includes('Êö¥Èõ®') || 
      weatherText.includes('Â∞èÈõ®') || weatherText.includes('ÊØõÊØõÈõ®') || weatherText.includes('Èõ∑')) return Bell
  if (weatherText.includes('Èõ™') || weatherText.includes('Êö¥Èõ™')) return Bell
  if (weatherText.includes('‰∫ë') || weatherText.includes('Â§ö‰∫ë') || weatherText.includes('Èò¥')) return Cloudy
  if (weatherText.includes('È£é')) return Bell
  return Sunny // ÈªòËÆ§Êô¥Â§©ÂõæÊ†á
}

/**
 * üé® Â§©Ê∞îÂõæÊ†áÈ¢úËâ≤Êò†Â∞Ñ
 * Ê†πÊçÆÂ§©Ê∞îÁä∂ÂÜµËøîÂõûÂØπÂ∫îÁöÑÈ¢úËâ≤ÂÄº
 */
const getWeatherIconColor = (weatherText: string) => {
  if (weatherText.includes('Êô¥')) return '#FFD700' // ÈáëÈªÑËâ≤
  if (weatherText.includes('Èõ®') || weatherText.includes('ÈòµÈõ®')) return '#4A90E2' // ËìùËâ≤
  if (weatherText.includes('Èõ∑')) return '#9B59B6' // Á¥´Ëâ≤
  if (weatherText.includes('Èõ™')) return '#87CEEB' // Â§©ËìùËâ≤
  if (weatherText.includes('‰∫ë') || weatherText.includes('Â§ö‰∫ë')) return '#95A5A6' // ÁÅ∞Ëâ≤
  if (weatherText.includes('Èò¥')) return '#7F8C8D' // Ê∑±ÁÅ∞Ëâ≤
  if (weatherText.includes('È£é')) return '#16A085' // ÈùíËâ≤
  return '#FFD700' // ÈªòËÆ§ÈáëÈªÑËâ≤
}

/**
 * üìä Ê£ÄÊü•ÊòØÂê¶ÊúâÊ¨°Ë¶ÅÂ§©Ê∞î‰ø°ÊÅØ
 * Áî®‰∫éÊéßÂà∂ËØ¶ÁªÜÂ§©Ê∞î‰ø°ÊÅØÁöÑÊòæÁ§∫
 */
const hasSecondaryWeatherInfo = (weather: WeatherData) => {
  return (
    (weather.feelsLike && weather.feelsLike !== weather.temperature) ||
    weather.humidity ||
    (weather.windDir && weather.windScale) ||
    (weather.precipitation && weather.precipitation > 0)
  )
}
</script>

<style scoped>
/* üå§Ô∏è Â§©Ê∞î‰ø°ÊÅØÂå∫ÂüüÊ†∑Âºè */
.weather-info {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  min-width: 280px;
}

.weather-content {
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(10px);
  border-radius: 12px;
  padding: 12px 16px;
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.weather-main {
  display: flex;
  align-items: center;
  gap: 12px;
}

.weather-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  border-radius: 8px;
  background: rgba(255, 255, 255, 0.1);
}

.weather-details {
  flex: 1;
}

.weather-primary {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 4px;
}

.weather-primary .location {
  font-size: 14px;
  color: rgba(255, 255, 255, 0.9);
  font-weight: 500;
}

.weather-primary .temperature {
  font-size: 18px;
  color: #fff;
  font-weight: 600;
}

.weather-primary .weather-text {
  font-size: 14px;
  color: rgba(255, 255, 255, 0.8);
}

.weather-secondary {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  font-size: 12px;
}

.weather-secondary .humidity,
.weather-secondary .wind,
.weather-secondary .feels-like,
.weather-secondary .precipitation {
  color: rgba(255, 255, 255, 0.7);
  white-space: nowrap;
}

.weather-loading {
  display: flex;
  align-items: center;
  gap: 8px;
  color: rgba(255, 255, 255, 0.8);
  font-size: 14px;
}

.weather-loading .loading-icon {
  animation: spin 1s linear infinite;
}

.weather-default {
  display: flex;
  align-items: center;
  gap: 8px;
  color: rgba(255, 255, 255, 0.8);
  font-size: 14px;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* ÂìçÂ∫îÂºèÈÄÇÈÖç */
@media (max-width: 768px) {
  .weather-info {
    min-width: 200px;
  }
  
  .weather-content {
    padding: 8px 12px;
  }
  
  .weather-main {
    gap: 8px;
  }
  
  .weather-icon {
    width: 32px;
    height: 32px;
  }
  
  .weather-primary .temperature {
    font-size: 16px;
  }
  
  .weather-secondary {
    gap: 8px;
    font-size: 11px;
  }
}
</style>