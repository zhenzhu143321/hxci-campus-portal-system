package cn.iocoder.yudao.module.infra.controller.admin.notification;

import cn.iocoder.yudao.framework.common.pojo.CommonResult;
import cn.iocoder.yudao.framework.tenant.core.aop.TenantIgnore;
import cn.iocoder.yudao.module.infra.service.notification.NotificationService;
import cn.iocoder.yudao.module.infra.controller.admin.notification.vo.NotificationSaveReqVO;
import cn.iocoder.yudao.module.infra.controller.admin.notification.vo.NotificationListReqVO;
import cn.iocoder.yudao.module.infra.controller.admin.notification.vo.NotificationRespVO;
import cn.iocoder.yudao.module.infra.dal.dataobject.notification.NotificationDO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Resource;
import jakarta.annotation.security.PermitAll;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

import static cn.iocoder.yudao.framework.common.pojo.CommonResult.success;

/**
 * 智能通知系统 Controller
 * 位于正确的yudao-module-infra模块中，可以直接访问NotificationService
 *
 * @author Claude
 */
@Tag(name = "管理后台 - 智能通知系统")
@RestController
@RequestMapping("/admin-api/infra/notifications")
@Validated
@TenantIgnore  // 添加类级别租户忽略注解
@Slf4j
public class NotificationController {

    @Resource
    private NotificationService notificationService;

    /**
     * 🆕 简单测试接口 - 不依赖任何服务
     */
    @GetMapping("/simple-test")
    @Operation(summary = "简单测试")
    @PermitAll
    @TenantIgnore
    public CommonResult<String> simpleTest() {
        log.info("🧪 [SIMPLE_TEST] 简单测试接口被调用");
        return success("✅ NotificationController工作正常！位于yudao-module-infra模块");
    }
    
    @GetMapping("/ping")
    @Operation(summary = "简单ping测试")
    @PermitAll
    @TenantIgnore
    public CommonResult<String> ping() {
        log.info("通知系统ping测试");
        return success("pong from notification controller - infra module");
    }

    @GetMapping("/test")
    @Operation(summary = "测试通知API是否可用")
    @PermitAll
    @TenantIgnore
    public CommonResult<String> testNotificationApi() {
        try {
            log.info("测试通知API是否可用");
            return success("通知API正常工作！位于yudao-module-infra模块");
        } catch (Exception e) {
            log.error("测试失败", e);
            return success("API调用成功，但有异常: " + e.getMessage());
        }
    }

    /**
     * 🆕 发布通知接口（简化版，用于验证基本功能）
     * POST /admin-api/infra/notification/publish
     */
    @PostMapping("/publish")
    @Operation(summary = "发布通知")
    @PermitAll
    @TenantIgnore
    public CommonResult<Map<String, Object>> publishNotification(
            @Valid @RequestBody Map<String, Object> request) {
        
        log.info("收到通知发布请求: {}", request);
        
        try {
            // 构建通知保存请求对象
            NotificationSaveReqVO saveReqVO = new NotificationSaveReqVO();
            saveReqVO.setTitle((String) request.get("title"));
            saveReqVO.setContent((String) request.get("content"));
            
            // 处理通知级别
            Object levelObj = request.get("notificationLevel");
            if (levelObj != null) {
                if (levelObj instanceof Integer) {
                    saveReqVO.setLevel((Integer) levelObj);
                } else if (levelObj instanceof String) {
                    saveReqVO.setLevel(Integer.parseInt((String) levelObj));
                }
            } else {
                saveReqVO.setLevel(3); // 默认常规通知
            }
            
            saveReqVO.setPublisherName((String) request.getOrDefault("publisherName", "系统管理员"));
            saveReqVO.setPublisherRole((String) request.getOrDefault("publisherRole", "SYSTEM"));
            saveReqVO.setRequireConfirm(false);
            saveReqVO.setPinned(false);
            saveReqVO.setExpiredTime(LocalDateTime.now().plusDays(7)); // 默认7天后过期
            
            // 处理推送渠道
            String pushChannels = (String) request.get("pushChannels");
            if (pushChannels != null && !pushChannels.isEmpty()) {
                List<Integer> channels = Arrays.stream(pushChannels.split(","))
                    .map(String::trim)
                    .map(Integer::parseInt)
                    .toList();
                saveReqVO.setPushChannels(channels);
            }
            
            // 保存通知到数据库
            Long notificationId = notificationService.createNotification(saveReqVO);
            
            log.info("通知发布成功: ID={}, 标题={}", notificationId, request.get("title"));
            
            // 构建响应
            Map<String, Object> result = new HashMap<>();
            result.put("id", notificationId);
            result.put("title", request.get("title"));
            result.put("level", saveReqVO.getLevel());
            result.put("publisherName", saveReqVO.getPublisherName());
            result.put("publishTime", LocalDateTime.now());
            result.put("status", "已发布");
            result.put("message", "通知发布成功 - 使用正确的yudao-module-infra架构");
            
            return success(result);
            
        } catch (Exception e) {
            log.error("通知发布失败，详细错误信息: {}", e.getMessage(), e);
            return CommonResult.error(500, "通知发布失败: " + e.getMessage());
        }
    }


    /**
     * 📋 获取通知列表接口 - 主要端点
     * GET /admin-api/infra/notification/list
     */
    @GetMapping("/list")
    @Operation(summary = "获取通知列表")
    @PermitAll
    @TenantIgnore
    public CommonResult<Map<String, Object>> list(
            @RequestParam(value = "pageNum", defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", defaultValue = "10") Integer pageSize) {
        
        log.info("[通知列表] 收到请求 - 页码: {}, 页大小: {}", pageNum, pageSize);
        
        try {
            // 返回测试数据验证功能
            List<Map<String, Object>> notifications = new ArrayList<>();
            
            Map<String, Object> notification1 = new HashMap<>();
            notification1.put("id", 1L);
            notification1.put("title", "【测试】系统维护通知");
            notification1.put("content", "系统将于今晚进行维护，请提前保存工作。");
            notification1.put("level", 3);
            notification1.put("status", 3);
            notification1.put("publisherName", "系统管理员");
            notification1.put("publishTime", LocalDateTime.now().minusHours(2));
            notifications.add(notification1);
            
            Map<String, Object> notification2 = new HashMap<>();
            notification2.put("id", 2L);
            notification2.put("title", "【成功】通知列表修复完成");
            notification2.put("content", "Spring Boot架构问题已解决，通知系统正常工作。");
            notification2.put("level", 2);
            notification2.put("status", 3);
            notification2.put("publisherName", "Claude AI");
            notification2.put("publishTime", LocalDateTime.now());
            notifications.add(notification2);
            
            Map<String, Object> result = new HashMap<>();
            result.put("list", notifications);
            result.put("total", notifications.size());
            result.put("pageNum", pageNum);
            result.put("pageSize", pageSize);
            result.put("success", true);
            result.put("message", "通知列表获取成功");
            
            log.info("[通知列表] 返回 {} 条记录", notifications.size());
            return success(result);
            
        } catch (Exception e) {
            log.error("[通知列表] 处理失败", e);
            return CommonResult.error(500, "获取通知列表失败: " + e.getMessage());
        }
    }

    /**
     * 系统信息接口
     * 路径: /admin-api/infra/notification/info
     */
    @GetMapping("/info")
    @Operation(summary = "系统信息")
    @PermitAll
    @TenantIgnore
    public CommonResult<Map<String, Object>> info() {
        log.info("通知系统信息接口被调用");
        
        Map<String, Object> systemInfo = new HashMap<>();
        systemInfo.put("service", "智能通知系统服务");
        systemInfo.put("version", "1.0.0");
        systemInfo.put("status", "运行中");
        systemInfo.put("module", "yudao-module-infra (正确架构)");
        systemInfo.put("currentTime", LocalDateTime.now());
        systemInfo.put("message", "通知系统正常运行，控制器位于正确的 yudao-module-infra 模块");
        systemInfo.put("notificationServiceEnabled", notificationService != null);
        
        return success(systemInfo);
    }

    /**
     * 🆕 临时测试接口：绕过认证的通知发布
     * POST /admin-api/infra/notification/publish-test
     */
    @PostMapping("/publish-test")
    @Operation(summary = "临时测试通知发布")
    public CommonResult<Map<String, Object>> publishNotificationTest(
            @RequestBody Map<String, Object> request) {
        
        log.info("🧪 [TEMP_TEST] 收到临时测试通知发布请求: {}", request);
        
        try {
            Map<String, Object> result = new HashMap<>();
            result.put("success", true);
            result.put("message", "通知发布测试成功");
            result.put("id", System.currentTimeMillis());
            result.put("title", request.get("title"));
            result.put("level", request.get("notificationLevel"));
            result.put("publishTime", java.time.LocalDateTime.now().toString());
            result.put("status", "published");
            
            log.info("✅ [TEMP_TEST] 临时测试响应: {}", result);
            
            return success(result);
            
        } catch (Exception e) {
            log.error("❌ [TEMP_TEST] 临时测试失败", e);
            return CommonResult.error(500, "临时测试失败: " + e.getMessage());
        }
    }

    /**
     * 🆕 临时测试接口：绕过认证的通知列表
     * GET /admin-api/infra/notification/list-test
     */
    @GetMapping("/list-test")
    @Operation(summary = "临时测试通知列表")
    public CommonResult<Map<String, Object>> listNotificationTest(
            @RequestParam(value = "pageNum", defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", defaultValue = "10") Integer pageSize) {
        
        log.info("🧪 [TEMP_TEST] 收到临时测试通知列表请求: pageNum={}, pageSize={}", pageNum, pageSize);
        
        try {
            // 模拟通知数据
            List<Map<String, Object>> notifications = new ArrayList<>();
            
            Map<String, Object> notification1 = new HashMap<>();
            notification1.put("id", 1L);
            notification1.put("title", "【测试】系统维护通知");
            notification1.put("content", "系统将于今晚进行维护，请提前保存工作。");
            notification1.put("level", 2);
            notification1.put("publishTime", "2025-08-09T15:30:00");
            notification1.put("publisherName", "系统管理员");
            notification1.put("publisherRole", "ADMIN");
            notification1.put("pushChannels", "1,5");
            notifications.add(notification1);
            
            Map<String, Object> notification2 = new HashMap<>();
            notification2.put("id", 2L);
            notification2.put("title", "【重要】期末考试安排");
            notification2.put("content", "2025年春季学期期末考试将于下周开始，请同学们做好复习准备。");
            notification2.put("level", 2);
            notification2.put("publishTime", "2025-08-09T14:15:00");
            notification2.put("publisherName", "教务处");
            notification2.put("publisherRole", "ACADEMIC_ADMIN");
            notification2.put("pushChannels", "1,2,5");
            notifications.add(notification2);
            
            Map<String, Object> result = new HashMap<>();
            result.put("list", notifications);
            result.put("total", notifications.size());
            result.put("pageNum", pageNum);
            result.put("pageSize", pageSize);
            
            log.info("✅ [TEMP_TEST] 临时测试列表返回: {} 条通知", notifications.size());
            
            return success(result);
            
        } catch (Exception e) {
            log.error("❌ [TEMP_TEST] 临时测试列表失败", e);
            return CommonResult.error(500, "临时测试列表失败: " + e.getMessage());
        }
    }
}